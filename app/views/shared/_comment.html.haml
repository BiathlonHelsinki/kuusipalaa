%li{class: comment.item == root ? 'top-level' : false}

  .row
    .small-12.columns
      .entry{class: [comment.class.to_s.downcase, comment == last ? :last : false]}
        .row
          .small-12.large-10.columns.end{class: comment.comments.empty? ? :divided : false}
            .comment_avatar
              - if comment.class == Comment
                = link_to image_tag(comment.contributor.avatar.url(:thumb).gsub(/development/, 'production'), width: 45), comment.user, target: :_blank, class: :comment_avatar
              - elsif comment.class == Pledge
                = link_to image_tag(comment.pledger.avatar.url(:thumb).gsub(/development/, 'production'), width: 45), comment.pledger, target: :_blank, class: :comment_avatar
            .comment_body
              .comment_type
                - if comment.class == Comment
                  = raw t(:user_says_on, :user => link_to(comment.contributor.display_name, comment.contributor, target: :_blank), date: l(comment.created_at, format: :long))
                - elsif comment.class == Pledge
                  = raw t(:has_pledged, user: link_to(comment.pledger.display_name, comment.pledger, target: :_blank), amount: comment.pledge)
                  - unless comment.extra_info.blank?
                    .pledge_metadata
                      = t comment.extra_info.to_sym, when: comment.spent_at.localtime rescue ''
              - if comment.class == Comment    
                .comment_content
                  - link_filter = AutoHtml::Link.new(target: '_blank')
                  = raw link_filter.call(simple_format(comment.content_linked))

                  - if comment.image?
                    %br/
                    .image_attached= image_tag comment.image.url(:medium)
                  - if comment.attachment?
                    %p= link_to t(:download) + ' ' + File.basename(URI.parse(comment.attachment.url).path), comment.attachment.url, class: [:button, :round, :tiny]
            - if comment.class == Comment  && commenting_open
              .row
                .sma11-12.large-10.columns
                  .avatar_spacer &nbsp;
                  %button.button{type: :button, :'data-toggle' => 'reply_dropdown_' + comment.id.to_s }= t(:reply)
                  - if user_signed_in?
                    - if can?(:destroy, comment) && comment.comments.empty? && comment.class != Pledge && commenting_open
                      = link_to fa_icon('trash'), comment, method: :delete, data: {confirm: t(:are_you_sure_delete_comment)} #, class: [:button, :tiny, :alert]
                  .dropdown-pane{id:'reply_dropdown_' + comment.id.to_s, :'data-dropdown' => '', :'data-close-on-click' => true, :'data-auto-focus' => true}
                    = link_to t(:comment_in_main_thread), '#', onclick: "$('.dropdown-pane').foundation('close');$(document).scrollTo('#main_thread', 800);return false;", class: [:button, :tiny, :secondary]
                    %br/
                    - if depth > 0
                      - if depth == 1
                        = link_to t(:comment_this_subthread), '#', onClick: "$('.dropdown-pane').foundation('close');$('#comment_#{comment.item.id.to_s}.occluded_form').slideToggle();$(document).scrollTo('#comment_#{comment.item.id.to_s}.occluded_form', 800);return false;", class: [:button, :tiny, :secondary]

                      - else
                        = link_to t(:comment_this_subthread), '#', onClick: "$('.dropdown-pane').foundation('close');$('#comment_#{comment.item.id.to_s}.occluded_form').slideToggle();$(document).scrollTo('#comment_#{comment.item.id.to_s}.occluded_form', 800);return false;", class: [:button, :tiny, :secondary]
                      %br/
                    - if comment.comments.empty? && depth < 2
                      = link_to t(:start_new_thread), '#', onClick: "$('.dropdown-pane').foundation('close');$('#comment_#{comment.id.to_s}.occluded_form').slideToggle();return false;", class: [:button, :tiny, :secondary]

        - if comment.class == Comment                   
          - unless comment.comments.empty?
            - if comment.comments.size > 2
              .row
                .sma11-12.large-10.columns
                  .row
                    .small-2.columns.horizontal_line
                    .small-10.columns
                      .show_link= link_to t(:show_x_comments, count: comment.comments.size), '#', onClick: "javascript:$('#comment_thread_#{comment.id.to_s}').show();$(this).hide();return false;"
            %ul{id: 'comment_thread_' + comment.id.to_s, class: comment.comments.size > 2 ? :hidden : false}= render partial: 'shared/comment', collection: comment.comments.order(created_at: :asc), locals: {depth: depth + 1,root: root, last: comment.comments.last, commenting_open: commenting_open}

          .occluded_form[comment]= render partial: 'shared/comments_and_form', locals: {depth: depth + 1, commentable: comment, commenting_open: commenting_open}
