= semantic_form_for [@budgetproposal.season, @budgetproposal, @vote] do |f|
  = f.input :vote, as: :radio, label: t(:should_this_item_be_in_budget, season: @budgetproposal.season.number)


  - if @stake_collection.size < 1
    .vote_as= t :voting_as
    = f.hidden_field :voter_type, value: 'User', 'required' => ''
    = f.hidden_field :voter_id, value: current_user.id , 'required' => ''
    .avatar{id: "avatar_vote_voter"}= image_tag current_user.avatar.url(:thumb).gsub(/development/, 'production')

    .who= link_to(current_user.display_name, current_user, target: :_blank) 
  - else
    .vote_as= t :vote_as
    .avatar{id: "avatar_vote_voter"}= image_tag @voter.avatar.url(:thumb).gsub(/development/, 'production')
    = f.hidden_field :voter_type, value: "#{@voter.class.to_s}", 'required' => '', id: :vote_voter_type
    = f.hidden_field :voter_id,  value: "#{@voter.id.to_s}", 'required' => '', id: :vote_voter_id
    = f.input :voter, as: :select, input_html: {id: :vote_voter_select}, label: false, collection: options_for_select(@stake_collection.map{|x| [x[0], x[1], { 'rel' => x[2], 'disabled'=> x[3], 'price' => x[4], 'vat' => x[5]}] }),  include_blank: false
    :javascript
      $("#vote_voter_select option[rel='#{@voter.class.to_s}'][value='#{@voter.id.to_s}']").prop('selected', true);
  = f.submit t(:vote_verb)

-# .small-12.columns.point_count_small
-#   = raw t(:still_needed, amount: @budgetproposal.points_still_needed.to_s + tsign)
-#   %br/
-#   = raw t :who_can_vote_a_max_of_x, who: @voter.display_name, max: raw(@budgetproposal.max_for_user(@voter, @vote).to_s + tsign)

- if user_signed_in?

  :javascript

    $('#vote_voter_select').on('change', function() {
      let ns = $(this).val();
      $.ajax({
          url: "/budgetproposals/#{@budgetproposal.id.to_s}/find_vote?voter_type=" + $('#vote_voter_select option').filter(":selected").attr('rel') + "&voter_id=" + ns,
          success: function(vote_limit) {
            $('#vote_panel_wrapper').html(vote_limit)
          }
      })

      $('#vote_voter_type').val($('#vote_voter_select option').filter(":selected").attr('rel'));
      $('#vote_voter_id').val($('#vote_voter_select').val());
      $.ajax({
        url: '/users/' + $('#vote_voter_select').val() + '/get_avatar?class=' + $('#vote_voter_type').val() + '&size=thumb',
        success: function(image) {

          $('#avatar_vote_voter img').attr('src', image);
          $('#avatar_vote_voter img').attr('alt', $('#vote_voter_select option').filter(":selected").html());
       
         }
     })
    })
    $(document).foundation()

-#   = semantic_form_for [@budgetproposal, @vote], html: {:"data-abide" => '', id: :this_vote } do |f|
-#     .row.slider_row
-#       .small-12.medium-2.columns
-#         - if @voter.available_balance > 0
-#           = f.input :vote, label: false
-#           :javascript
-#             $('a#vote_button_label').removeClass('disabled');
-#             $('a#vote_button_label').attr('onClick', '$("form#this_vote").submit(); return false;')
-#         - else
-#           :javascript
-#             $('a#vote_button_label').addClass('disabled');
-#             $('a#vote_button_label').attr('onClick', 'return false;')

-#       .medium-7.columns
-#         - if @voter.available_balance > 0
-#           .slider{"data-initial-start" => "#{@vote.new_record? ? 0 : @vote.vote}", "data-start" => "0", "data-end" => "#{@budgetproposal.max_for_user(@voter, @vote)}", "data-slider" => ""}
-#             %span.slider-handle{"aria-controls" => "vote_vote", "data-slider-handle" => "", :role => "slider", :tabindex => "1"}
-#               %span.slider-fill
-#         - else
-#           = t :get_points_methods
-#       .small-12.medium-3.columns.third.nopadding
-#         - if @collection_options.size < 2
-#           .vote_as= t :pledging_as
-#           = f.text_field :voter_type, value: 'User', 'required' => ''
-#           = f.text_field :voter_id, value: current_user.id , 'required' => ''
-#           .avatar{id: "avatar_vote_voter"}= image_tag current_user.avatar.url(:thumb).gsub(/development/, 'production')

-#           .who= link_to(current_user.display_name, current_user, target: :_blank) 
-#         - else
-#           .vote_as= t :vote_as
-#           .avatar{id: "avatar_vote_voter"}= image_tag @voter.avatar.url(:thumb).gsub(/development/, 'production')
-#           = f.text_field :voter_type, value: "#{@voter.class.to_s}", 'required' => '', id: :vote_voter_type
-#           = f.text_field :voter_id,  value: "#{@voter.id.to_s}", 'required' => '', id: :vote_voter_id
-#           = f.input :voter, as: :select, input_html: {id: :vote_voter_select}, label: false, collection: options_for_select(@collection_options.map{|x| [x[0], x[1], { 'rel' => x[2], 'disabled'=> x[3], 'price' => x[4], 'vat' => x[5]}] }),  include_blank: false
-#           :javascript
-#             $("#vote_voter_select option[rel='#{@voter.class.to_s}'][value='#{@voter.id.to_s}']").prop('selected', true);
-#           - if @vote.new_record?
-#             :javascript

-#               $('#vote_button_label').html("#{t(:vote_verb)}")
-#           - else
-#             :javascript
-#               $('#vote_button_label').html("#{t(:change_vote)}")


-# - else
-#   .small-12.medium-8.columns.leftborder
-#     .larger= link_to t(:you_should_join_to_vote), '/users/sign_in' , class:[:button, :bordered]