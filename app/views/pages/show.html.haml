%article.post_single
  .row
    .small-12.columns.lessmargins.lessright
      .lifted_box
        .title
          = @page.title
        .blurb

          - unless @page.questions.empty?
            .questions_box
              %ul#page_questions
                - @page.questions.each do |q|
                  - next if q.answers.empty?
                  %li.question
                    = link_to q.question, '#', onClick: "javascript:$('#question_#{q.id.to_s}').slideToggle();return false;"

                  .answers[q]
                    - unless q.contributor.nil?
                      .translation_credit
                        = link_to q.contributor do
                          = image_tag q.contributor.avatar.url(:thumb).gsub(/development/, 'production')
                          = t(:question_asked_by, name: q.contributor.display_name)
                    .answer_block
                      - q.answers.each do |a|
                        .answer_section{class: q.answers.last == a ? 'last' : false}[a]
                          = sanitize a.body
                          
                          .translation_credit
                            - unless a.contributor.nil?
                              = link_to a.contributor do
                                = image_tag a.contributor.avatar.url(:thumb).gsub(/development/, 'production')
                                = t(:answer_contributed_by, name: a.contributor.display_name)
                                %br/
                            

                            .comment_info
                              - unless a.comments.empty?
                                = link_to a.comments.count.to_s + ' ' + t(:comment, count: a.comments.count), '#', onClick: "javscript:$('#comments_answer_#{a.id.to_s}').slideToggle();return false;"
                                |
                              - if user_signed_in?  
                                
                                = link_to t(:add_a_comment_to_this_answer), new_page_question_answer_comment_path(@page, q, a), remote: true
                          - if a.read_translated_attribute(:body, session[:locale]).blank?

                            .translate
                              = link_to t(:no_translation_in_lang, obj: '', lang: t(:locale_name))
                              %p= link_to t(:contribute_a_translation_into_lang), contribute_translation_question_path(q), class: [:button, :tiny]
                        - unless a.comments.empty?
                          .comments{id: "comments_answer_#{a.id.to_s}"}
                            - a.comments.each do |comment|
                              = render partial: 'shared/answer_comment', locals: {comment: comment, last: a.comments.last, depth: 0}
                        .new_comment_form{id: "new_comment_form_#{a.id.to_s}"}

                    - if user_signed_in?
                      %small= link_to t(:add_another_answer), new_page_question_answer_path(@page, q), remote: true, class: [:button, :tiny, :bordered], id: ["add_answer_#{q.id.to_s}"]

          - unless @page.questions.reject{|x| !x.answers.empty? }.empty?

            .unanswered_questions_box
              .small_title= t :unanswered_questions
              %ul#unanswered_questions
                - @page.questions.each do |q|
                  - next unless q.answers.empty?
                  %li.question
                    = link_to q.question, '#' , onClick: "javascript:$('#question_#{q.id.to_s}').slideToggle();return false;"
                    - if user_signed_in?
                      %small= link_to t(:answer_this), new_page_question_answer_path(@page, q), remote: true,  id: ["add_answer_#{q.id.to_s}"], onClick: "javascript:$('#question_#{q.id.to_s}').slideToggle();return false;"#'#' , onClick: "javascript:$('#question_#{q.id.to_s}').slideToggle();return false;"
                    - else
                      %small= link_to t(:answer_this), '/users/sign_in'
                  .unanswered.answers[q]
                    .translation_credit
                      - unless q.contributor.nil?
                        = link_to q.contributor do
                          = image_tag q.contributor.avatar.url(:thumb).gsub(/development/, 'production')
                          = t(:question_asked_by, name: q.contributor.display_name)
                    .answer_block

            

          .row
            .small-8.large-3.columns
              - if user_signed_in?

                = link_to '#', onClick: "javascript:$('#new_question_form').slideToggle();return false;" do
                  .front_button.text-center
                    = t(:ask_a_question)
              - else
                = link_to '/users/sign_in' do
                  .front_button.text-center
                    = t(:ask_a_question)
          - if user_signed_in?          
            .row
              .small-12.large-8.columns
                #new_question_form
                  %p= t :ask_question_blurb
                  = semantic_form_for [@page, Question.new], html: {:'data-abide' => ''} do |f|
                    = f.globalize_fields_for session[:locale] do |ff|
                      %p= t :your_question
                      = ff.text_field :question, :required => ''
                    = f.input :era_id, as: :hidden, input_html: {value: 3, required: ''}
                    - if @collection_options.size > 1

                      = f.input :contributor_type, as: :hidden, input_html: {'required' => '',value: 'User'}
                      = f.input :contributor_id, as: :hidden, input_html: {'required' => '', value: current_user.id }
                      = f.input :contributor, as: :select, input_html: {id: :question_contributor_select}, label: t(:who_is_asking), collection: options_for_select(@collection_options.map{|x| [x[0], x[1], { 'rel' => x[2], 'disabled'=> x[3], 'price' => x[4], 'vat' => x[5]}] }),  include_blank: false
                    - else
                      = f.input :contributor_type, as: :hidden, input_html: {'required' => '', value: 'User'}
                      = f.input :contributor_id, as: :hidden, input_html: {value: current_user.id }

                    = f.submit t(:ask), class: [:button, :small]
          = raw @page.body

- if user_signed_in?
  = content_for :jquery do
    :plain
      $('#question_contributor_select').on('change', function() {
      $('#question_contributor_type').val($('#question_contributor_select option').filter(":selected").attr('rel'));
      $('#question_contributor_id').val($('#question_contributor_select').val());

    });