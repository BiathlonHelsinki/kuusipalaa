.idea_detail_view
  .row
    .small-12.columns.title_box
      .title
        = t :proposal
        = ": "
        = @idea.name
    - if @idea.converted?
      .has_enough.columns.text-center
        .has_enough_banner= t :this_proposal_was_scheduled
        = link_to t(:please_see) + @idea.events.first.name, @idea.events.first
    - elsif @idea.has_enough?
      .has_enough.columns.text-center
        .has_enough_banner= t :this_proposal_has_enough_points
        - if user_signed_in?
          - if @idea.proposers.include?(current_user)
            = link_to t(:publish_this_proposal), publish_event_idea_path(@idea), class: [:button, :bordered]
          - else
            %p= t :proposer_must_publish
      
  - if @idea.image?
    .row
      .small-12.columns.image_box.nopadding
        - if @idea.image_width
          - if @idea.image_width > 800
            = image_tag @idea.image.url(:twelvehundred)
          - else
            = image_tag @idea.image.url(:medium)
        - else
          = image_tag @idea.image

  .row
    .small-12.columns.nopadding
      %table.proposal_info
        %tr
          %td.half
            .heading= t :proposed_on
            .value= l @idea.updated_at, format: :short
          %td.half
            .heading= t :proposed_by_empty
            .value
              .avatar= link_to image_tag(@idea.proposer.avatar.url(:thumb).gsub(/development/, 'production')), @idea.proposer
              .who= link_to(@idea.proposer.display_name, @idea.proposer, target: :_blank)
        %tr
          %td.half
            .heading
              - if @idea.timeslot_undetermined == true
                = t :proposed_length
              - else
                = t :when
            .value
              - if @idea.timeslot_undetermined == true
                = t(:proposed_length_short, hours: @idea.hours_estimate)
              - else
                = date_range(@idea.start_at.localtime, @idea.end_at.localtime)

                .subtext= t(:calendar_reserved_from, when: l(@idea.start_at.localtime - 1.hour, format: :short))
                - unless @idea.additionaltimes.empty?
                  - @idea.additionaltimes.each do |t|
                    .additional
                      = " + "
                      = date_range(t.start_at.localtime, t.end_at.localtime)

                      .subtext= t(:calendar_reserved_from, when: l(t.start_at.localtime - 1.hour, format: :short))
          %td.half
            .heading= t :venue
            .value
              - case @idea.room_needed
                - when 1
                  = t(:main_room)
                - when 2
                  = t(:back_room_short)
                - when 3
                  = t(:both_rooms_short)
              - if @idea.allow_others == true
                .subtext= t :others_are_allowed
        %tr
          %td
            .heading= t :price_public
            .value
              - if @idea.price_public == 0
                = t :free_entry
              - else
                = number_to_currency(@idea.price_public, unit: raw("&euro;"), format: "%n %u")
          %td
            .heading= t :special_notes
            .value= @idea.special_notes.blank? ? t(:negative) : @idea.special_notes
        %tr
          %td{colspan: 2}
            .heading= t :short_description
            .value= @idea.short_description
        %tr
          %td{colspan: 2}
            .heading= t :proposal_description
            .value= simple_format @idea.proposal_text   

     

  .row
    .small-12.columns.points_stats
      .row.slider_header
        .small-3.columns= t :points_pledged
        .small-6.columns &nbsp;
        .small-3.columns.text-right.end= t :points_required
      .row
        .small-12.columns
          .progress{role: 'progressbar', tabindex: 0, 'aria-valuenow' => @idea.pledged, 'aria-valuemin' => 0, 'aria-valuemax' => @idea.points_needed }
            .progress-meter{style: "width: #{((@idea.pledged.to_f / @idea.points_needed.to_f)*100)}%"} 
      .row.bottom
        .small-3.columns.point_count= @idea.pledged
        .small-6.columns &nbsp;
        .small-3.columns.point_count.text-right.end= @idea.points_needed
      - if user_signed_in?
        .row.pledge_info#pledge_panel_wrapper

          = render partial: 'ideas/pledge_panel'


  - if user_signed_in?
    .row
      .small-12.columns.lessmargins.right_adjust
        -if @pledge.new_record?
          = link_to  t(:pledge_verb), '#', onClick: '$("form#this_pledge").submit(); return false', class: [:bordered, :button, 'small-12', :columns], id: :pledge_button_label
        - else
          = link_to t(:change_pledge), '#', onClick: '$("form#this_pledge").submit(); return false;', class: [:bordered, :button, 'small-12', :columns]    , id: :pledge_button_label         

  .row
    .small-12.columns.nopadding.title_box
      .title= t :discussion_and_recent_activity
      = t(:this_proposal_has_x_comments_x_pledges, count: @idea.comments.select(&:persisted?).size, comments: t(:comment, count: @idea.comments.select(&:persisted?).size), pledge_count: @idea.pledges.select(&:persisted?).size, pledges: t(:pledge, count: @idea.pledges.select(&:persisted?).size), pledged: @idea.pledged.to_s)

  .row#comments_list
    %ul.first= render(partial: 'shared/comment', collection: @idea.discussion.select(&:persisted?).sort_by(&:updated_at), locals: {depth: 0, root: @idea, last: @idea.comments.last, commenting_open: !@idea.converted?})
    #main_thread= render partial: 'shared/comments_and_form', locals: {commentable: @idea, depth: 0, commenting_open: !@idea.converted?}
    - if @idea.converted?
      .bottom_box= t :proposal_is_closed

= content_for :jquery do
  :plain
    $('.comment_content').readmore({lessLink: '<a class="button readmore" href="#">[#{t(:close)}]</a>', moreLink: '<a class="button readmore" href="#">[#{t(:read_more)}]</a>'});
      
- if user_signed_in?
  = content_for :jquery do
    :plain
      $('#pledge_pledger_select').on('change', function() {
        $.ajax({
            url: "/ideas/#{@idea.id.to_s}/pledges/find_pledge?pledger_type=" + $('#pledge_pledger_select option').filter(":selected").attr('rel') + "&pledger_id=" + $('#pledge_pledger_id').val(),
            success: function(pledge_limit) {
              $('#pledge_panel_wrapper').html(pledge_limit)
            }
        })

        $('#pledge_pledger_type').val($('#pledge_pledger_select option').filter(":selected").attr('rel'));
        $('#pledge_pledger_id').val($('#pledge_pledger_select').val());
        $.ajax({
          url: '/users/' + $('#pledge_pledger_select').val() + '/get_avatar?class=' + $('#pledge_pledger_type').val() + '&size=thumb',
          success: function(image) {

            $('#avatar_pledge_pledger img').attr('src', image);
            $('#avatar_pledge_pledger img').attr('alt', $('#pledge_pledger_select option').filter(":selected").html());
         
           }
          });
      }); 
